# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aIJz-RrV8_EWMTaY20ulhlXHaOdPSc5W
"""

# Using yfinance (Gold Futures GC=F)
import yfinance as yf

gold = yf.download('GC=F', start='2015-06-01',
end='2025-06-01', interval='1d')
gold = gold.reset_index()[['Date', 'Close']]
gold.to_csv('gold_10y.csv', index=False)

import pandas as pd

gold = pd.read_csv('/content/gold_10y.csv', parse_dates=['Date'])
gold['Gold_Diff'] = gold['Close'].diff()
gold_stationary = gold[['Date', 'Gold_Diff']].dropna()
gold_stationary.to_csv('gold_stationary.csv', index=False)

import pandas as pd

gold = pd.read_csv('/content/gold_10y.csv', parse_dates=['Date'])
# Explicitly convert the 'Close' column to numeric, coercing errors to NaN
gold['Close'] = pd.to_numeric(gold['Close'], errors='coerce')
gold['Gold_Diff'] = gold['Close'].diff()
gold_stationary = gold[['Date', 'Gold_Diff']].dropna()
gold_stationary.to_csv('gold_stationary.csv', index=False)

import pandas as pd
from statsmodels.tsa.ar_model import AutoReg
import matplotlib.pyplot as plt

# Load gold price data
gold = pd.read_csv('gold_10y.csv', parse_dates=['Date'])
gold = gold.set_index('Date').asfreq('B') # business days frequency
gold['Close'] = pd.to_numeric(gold['Close'], errors='coerce')
gold['Close'] = gold['Close'].interpolate() # fill missing values

# Fit AR(1) model (current value regressed on previous value)
model_ar = AutoReg(gold['Close'], lags=1).fit()
gold['AR1_pred'] = model_ar.fittedvalues

# Plot results
gold[['Close', 'AR1_pred']].plot(figsize=(12,4),
title='AR(1) Model: Gold Price')
plt.show()

# Print model summary
print(model_ar.summary())



from statsmodels.tsa.arima.model import ARIMA

# Fit MA(1) model (current value depends on current and previous error)
model_ma = ARIMA(gold['Close'], order=(0,0,1)).fit()
gold['MA1_pred'] = model_ma.fittedvalues

# Plot results
gold[['Close', 'MA1_pred']].plot(figsize=(12,4),
title='MA(1) Model: Gold Price')
plt.show()

# Print model summary
print(model_ma.summary())

# First, difference the series to remove trend (d=1)
gold['Close_diff'] = gold['Close'].diff()

# Fit ARIMA(1,1,1): AR(1) + 1 difference + MA(1)
model_arima = ARIMA(gold['Close'], order=(1,1,1)).fit()
gold['ARIMA_pred'] = model_arima.fittedvalues

# Plot differenced series and ARIMA predictions
gold[['Close_diff', 'ARIMA_pred']].dropna().plot(figsize=(12,4),title='ARIMA(1,1,1) Model: Gold Price Changes')
plt.show()

 # Print model summary
print(model_arima.summary())

# First, difference the series to remove trend (d=1)
gold['Close_diff'] = gold['Close'].diff()

# Fit ARIMA(1,1,1): AR(1) + 1 difference + MA(1)
model_arima = ARIMA(gold['Close'], order=(1,1,1)).fit()
gold['ARIMA_pred'] = model_arima.fittedvalues

# Plot differenced series and ARIMA predictions
gold[['Close', 'ARIMA_pred']].dropna().plot(figsize=(12,4),title='ARIMA(1,1,1) Model: Gold Price Changes')
plt.show()

 # Print model summary
print(model_arima.summary())

import pandas as pd
from statsmodels.tsa.ar_model import AutoReg
import matplotlib.pyplot as plt

# Load MRF share price data
gold = pd.read_csv('/content/mrf_10y.csv', parse_dates=['Date'])
gold = gold.set_index('Date').asfreq('B') # business days frequency
gold['Close'] = pd.to_numeric(gold['Close'], errors='coerce')
gold['Close'] = gold['Close'].interpolate() # fill missing values

# Fit AR(1) model (current value regressed on previous value)
model_ar = AutoReg(gold['Close'], lags=100).fit()
gold['AR1_pred'] = model_ar.fittedvalues

# Plot results
gold[['Close', 'AR1_pred']].plot(figsize=(12,4),
title='AR(1) Model: MRF Share Price')
plt.show()

# Print model summary
print(model_ar.summary())

import pandas as pd
from statsmodels.tsa.ar_model import AutoReg
import matplotlib.pyplot as plt

# Load BitCoin price data
gold = pd.read_csv('/content/btc_10y.csv', parse_dates=['Date'])
gold = gold.set_index('Date').asfreq('B') # business days frequency
gold['Close'] = pd.to_numeric(gold['Close'], errors='coerce')
gold['Close'] = gold['Close'].interpolate() # fill missing values

# Fit AR(1) model (current value regressed on previous value)
model_ar = AutoReg(gold['Close'], lags=100).fit()
gold['AR1_pred'] = model_ar.fittedvalues

# Plot results
gold[['Close', 'AR1_pred']].plot(figsize=(12,4),
title='AR(1) Model: BITCoin Price')
plt.show()

# Print model summary
print(model_ar.summary())

from statsmodels.tsa.arima.model import ARIMA

# Fit MA(1) model (current value depends on current and previous error)
model_ma = ARIMA(gold['Close'], order=(0,0,1)).fit()
gold['MA1_pred'] = model_ma.fittedvalues

# Plot results
gold[['Close', 'MA1_pred']].plot(figsize=(12,4),
title='MA(1) Model: BITCoin Price')
plt.show()

# Print model summary
print(model_ma.summary())

# First, difference the series to remove trend (d=1)
gold['Close_diff'] = gold['Close'].diff()

# Fit ARIMA(1,1,1): AR(1) + 1 difference + MA(1)
model_arima = ARIMA(gold['Close'], order=(1,1,1)).fit()
gold['ARIMA_pred'] = model_arima.fittedvalues

# Plot differenced series and ARIMA predictions
gold[['Close', 'ARIMA_pred']].dropna().plot(figsize=(12,4),title='ARIMA(1,1,1) Model: Gold Price Changes')
plt.show()

 # Print model summary
print(model_arima.summary())